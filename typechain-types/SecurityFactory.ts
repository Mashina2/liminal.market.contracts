/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SecurityFactoryInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MINT_AND_BURN_ROLE()": FunctionFragment;
    "aUsdAddress()": FunctionFragment;
    "burnSecurityTokenAndSetAUsdBalance(string,address,uint256,uint256)": FunctionFragment;
    "createToken(string,string)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getSecurityToken(string)": FunctionFragment;
    "grantMintAndBurnRole(address)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "kycAddress()": FunctionFragment;
    "mintSecurityTokenAndSetAUsdBalance(string,address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "securityTokens(string)": FunctionFragment;
    "sellSecurityToken(string,address,address,string,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINT_AND_BURN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aUsdAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "burnSecurityTokenAndSetAUsdBalance",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSecurityToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantMintAndBurnRole",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "kycAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintSecurityTokenAndSetAUsdBalance",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "securityTokens",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellSecurityToken",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINT_AND_BURN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aUsdAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnSecurityTokenAndSetAUsdBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSecurityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMintAndBurnRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kycAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintSecurityTokenAndSetAUsdBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "securityTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellSecurityToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "BoughtSecurityToken(string,address,uint256,uint256)": EventFragment;
    "Deployed(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SellSecurityToken(string,address,address,string,uint256)": EventFragment;
    "TokenCreated(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoughtSecurityToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellSecurityToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenCreated"): EventFragment;
}

export type BoughtSecurityTokenEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    symbol: string;
    recipient: string;
    amount: BigNumber;
    aUsdBalance: BigNumber;
  }
>;

export type BoughtSecurityTokenEventFilter =
  TypedEventFilter<BoughtSecurityTokenEvent>;

export type DeployedEvent = TypedEvent<
  [string, BigNumber],
  { addr: string; salt: BigNumber }
>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type SellSecurityTokenEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  {
    accountId: string;
    recipient: string;
    sender: string;
    symbol: string;
    amount: BigNumber;
  }
>;

export type SellSecurityTokenEventFilter =
  TypedEventFilter<SellSecurityTokenEvent>;

export type TokenCreatedEvent = TypedEvent<
  [string, string],
  { tokenAddress: string; symbol: string }
>;

export type TokenCreatedEventFilter = TypedEventFilter<TokenCreatedEvent>;

export interface SecurityFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SecurityFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    MINT_AND_BURN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    aUsdAddress(overrides?: CallOverrides): Promise<[string]>;

    burnSecurityTokenAndSetAUsdBalance(
      symbol: string,
      recipient: string,
      amount: BigNumberish,
      aUsdBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createToken(
      name: string,
      symbol: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSecurityToken(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantMintAndBurnRole(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    kycAddress(overrides?: CallOverrides): Promise<[string]>;

    mintSecurityTokenAndSetAUsdBalance(
      symbol: string,
      recipient: string,
      amount: BigNumberish,
      aUsdBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    securityTokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    sellSecurityToken(
      accountId: string,
      recipient: string,
      sender: string,
      symbol: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  MINT_AND_BURN_ROLE(overrides?: CallOverrides): Promise<string>;

  aUsdAddress(overrides?: CallOverrides): Promise<string>;

  burnSecurityTokenAndSetAUsdBalance(
    symbol: string,
    recipient: string,
    amount: BigNumberish,
    aUsdBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createToken(
    name: string,
    symbol: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSecurityToken(symbol: string, overrides?: CallOverrides): Promise<string>;

  grantMintAndBurnRole(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  kycAddress(overrides?: CallOverrides): Promise<string>;

  mintSecurityTokenAndSetAUsdBalance(
    symbol: string,
    recipient: string,
    amount: BigNumberish,
    aUsdBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  securityTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  sellSecurityToken(
    accountId: string,
    recipient: string,
    sender: string,
    symbol: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    MINT_AND_BURN_ROLE(overrides?: CallOverrides): Promise<string>;

    aUsdAddress(overrides?: CallOverrides): Promise<string>;

    burnSecurityTokenAndSetAUsdBalance(
      symbol: string,
      recipient: string,
      amount: BigNumberish,
      aUsdBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createToken(
      name: string,
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSecurityToken(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<string>;

    grantMintAndBurnRole(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    kycAddress(overrides?: CallOverrides): Promise<string>;

    mintSecurityTokenAndSetAUsdBalance(
      symbol: string,
      recipient: string,
      amount: BigNumberish,
      aUsdBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    securityTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

    sellSecurityToken(
      accountId: string,
      recipient: string,
      sender: string,
      symbol: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BoughtSecurityToken(string,address,uint256,uint256)"(
      symbol?: null,
      recipient?: null,
      amount?: null,
      aUsdBalance?: null
    ): BoughtSecurityTokenEventFilter;
    BoughtSecurityToken(
      symbol?: null,
      recipient?: null,
      amount?: null,
      aUsdBalance?: null
    ): BoughtSecurityTokenEventFilter;

    "Deployed(address,uint256)"(addr?: null, salt?: null): DeployedEventFilter;
    Deployed(addr?: null, salt?: null): DeployedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "SellSecurityToken(string,address,address,string,uint256)"(
      accountId?: null,
      recipient?: null,
      sender?: null,
      symbol?: null,
      amount?: null
    ): SellSecurityTokenEventFilter;
    SellSecurityToken(
      accountId?: null,
      recipient?: null,
      sender?: null,
      symbol?: null,
      amount?: null
    ): SellSecurityTokenEventFilter;

    "TokenCreated(address,string)"(
      tokenAddress?: null,
      symbol?: null
    ): TokenCreatedEventFilter;
    TokenCreated(tokenAddress?: null, symbol?: null): TokenCreatedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    MINT_AND_BURN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    aUsdAddress(overrides?: CallOverrides): Promise<BigNumber>;

    burnSecurityTokenAndSetAUsdBalance(
      symbol: string,
      recipient: string,
      amount: BigNumberish,
      aUsdBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createToken(
      name: string,
      symbol: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSecurityToken(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantMintAndBurnRole(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kycAddress(overrides?: CallOverrides): Promise<BigNumber>;

    mintSecurityTokenAndSetAUsdBalance(
      symbol: string,
      recipient: string,
      amount: BigNumberish,
      aUsdBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    securityTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sellSecurityToken(
      accountId: string,
      recipient: string,
      sender: string,
      symbol: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINT_AND_BURN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aUsdAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burnSecurityTokenAndSetAUsdBalance(
      symbol: string,
      recipient: string,
      amount: BigNumberish,
      aUsdBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createToken(
      name: string,
      symbol: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSecurityToken(
      symbol: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantMintAndBurnRole(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kycAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintSecurityTokenAndSetAUsdBalance(
      symbol: string,
      recipient: string,
      amount: BigNumberish,
      aUsdBalance: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    securityTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellSecurityToken(
      accountId: string,
      recipient: string,
      sender: string,
      symbol: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
