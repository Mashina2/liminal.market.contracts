/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface LiminalExchangeInterface extends utils.Interface {
  functions: {
    "aUSDAddress()": FunctionFragment;
    "buyWithAUsd(address,address,uint256)": FunctionFragment;
    "calculateFee(uint256)": FunctionFragment;
    "kycAddress()": FunctionFragment;
    "liminalWalletAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "securityFactoryAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdcAddress()": FunctionFragment;
    "usdcBrokerAddress()": FunctionFragment;
    "usdcContractAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aUSDAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithAUsd",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kycAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liminalWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "securityFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "usdcAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usdcBrokerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usdcContractAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "aUSDAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyWithAUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kycAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liminalWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "securityFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcBrokerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcContractAddress",
    data: BytesLike
  ): Result;

  events: {
    "Bought(uint256,string,string,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type BoughtEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string],
  {
    amount: BigNumber;
    accountId: string;
    symbol: string;
    fee: BigNumber;
    tokenAddress: string;
  }
>;

export type BoughtEventFilter = TypedEventFilter<BoughtEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LiminalExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiminalExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aUSDAddress(overrides?: CallOverrides): Promise<[string]>;

    buyWithAUsd(
      from: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    kycAddress(overrides?: CallOverrides): Promise<[string]>;

    liminalWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    securityFactoryAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdcAddress(overrides?: CallOverrides): Promise<[string]>;

    usdcBrokerAddress(overrides?: CallOverrides): Promise<[string]>;

    usdcContractAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  aUSDAddress(overrides?: CallOverrides): Promise<string>;

  buyWithAUsd(
    from: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateFee(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  kycAddress(overrides?: CallOverrides): Promise<string>;

  liminalWalletAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  securityFactoryAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdcAddress(overrides?: CallOverrides): Promise<string>;

  usdcBrokerAddress(overrides?: CallOverrides): Promise<string>;

  usdcContractAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    aUSDAddress(overrides?: CallOverrides): Promise<string>;

    buyWithAUsd(
      from: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    calculateFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kycAddress(overrides?: CallOverrides): Promise<string>;

    liminalWalletAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    securityFactoryAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    usdcAddress(overrides?: CallOverrides): Promise<string>;

    usdcBrokerAddress(overrides?: CallOverrides): Promise<string>;

    usdcContractAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Bought(uint256,string,string,uint256,address)"(
      amount?: null,
      accountId?: null,
      symbol?: null,
      fee?: null,
      tokenAddress?: null
    ): BoughtEventFilter;
    Bought(
      amount?: null,
      accountId?: null,
      symbol?: null,
      fee?: null,
      tokenAddress?: null
    ): BoughtEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    aUSDAddress(overrides?: CallOverrides): Promise<BigNumber>;

    buyWithAUsd(
      from: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kycAddress(overrides?: CallOverrides): Promise<BigNumber>;

    liminalWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    securityFactoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdcAddress(overrides?: CallOverrides): Promise<BigNumber>;

    usdcBrokerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    usdcContractAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aUSDAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyWithAUsd(
      from: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateFee(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kycAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liminalWalletAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    securityFactoryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdcAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdcBrokerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdcContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
